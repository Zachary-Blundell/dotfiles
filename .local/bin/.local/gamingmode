#!/bin/bash

# Function to display an informational message with Zenity
show_info_message() {
    zenity --info --text="$1" --timeout=2
}

# Function to display an error message with Zenity
show_error_message() {
    zenity --error --text="$1" --timeout=4
}

# Variable to store the password
password=""
# Function to prompt for password if not already set
getPassword() {
    if [ -z "$password" ]; then
        password=$(zenity --password --title="Enter Password" --width=300)
    fi
}

# Function to shutdown processes
shutdown_processes() {
    show_info_message "Shutdowning unnecessary tasks" --timeout=0.5
    getPassword
    # Check if the password is correct
    if echo "$password" | sudo -S true >/dev/null 2>&1; then
        # Terminate non-essential processes
        show_info_message "Terminating non-essential processes..." --timeout=0.5
        pkill -f evolution-addressbook-factory
        pkill -f evolution-calendar-factory
        pkill -f evolution-alarm-notify
        pkill -f evolution-source-registry
        pkill -f firedragon
        pkill -f whatsapp-for-linux
        pkill -f signal
        pkill -f conky
        pkill -f teams
        pkill -f flameshot
        pkill -f morgen
        pkill -f garuda-system-maintenance
        
        # Stop and disable background services
        show_info_message "Stopping background services..." --timeout=0.5
        sudo systemctl stop ollama
        sudo systemctl stop nordvpnd
        
        show_info_message "Optimization for gaming complete." --timeout=0.5
    else
        show_error_message "Incorrect password. Please try again."
        shutdown_processes
    fi
}

# Dummy function to perform system update
script_update() {
  getPassword
    if echo "$password" | sudo -S true >/dev/null 2>&1; then
        show_info_message "Starting system update" --timeout=0.5
        sudo pacman -Syu
    else
        show_error_message "Incorrect password. Please try again."
        script_update
    fi
}
# Dummy function to activate the TV
activate_tv() {
  zenity --info --text="Activating TV output..." --timeout=0.5
  xrandr --output HDMI-A-5 --auto --right-of DisplayPort-5
}

# Dummy function to activate controller in PC mode
activate_controller_pc() {
    echo "Activate controller in PC mode"
}

# Dummy function to activate controller in console mode
activate_controller_console() {
    echo "Activate controller in console mode"
}
# Dummy functions to launch Steam
launch_steam() {
    show_info_message "Starting Steam" --timeout=0.5
    steam
}
# Define the path where the .desktop files are located
desktop_path="/home/zaiquiri/Desktop/"

launch_it2() {
    show_info_message "Starting It Takes Two" --timeout=0.5
    echo "here is the thing: ${desktop_path}It Takes two.desktop"
    # Assuming the command to launch It Takes Two is stored in a .desktop file
    it2_command=$(awk -F= '/^Exec/ {print $2; exit}' "${desktop_path}It Takes Two.desktop")
    # Check if the command is retrieved successfully
    if [ -n "$it2_command" ]; then
        $it2_command
    else
        show_error_message "Failed to retrieve It Takes Two command from .desktop file"
    fi
}

launch_ark() {
    show_info_message "Starting Ark" --timeout=0.5
    # Assuming the command to launch Ark is stored in a .desktop file
    ark_command=$(awk -F= '/^Exec/ {print $2; exit}' "${desktop_path}ARK Servival Evolved.desktop")
    # Check if the command is retrieved successfully
    if [ -n "$ark_command" ]; then
        $ark_command
    else
        show_error_message "Failed to retrieve Ark command from .desktop file"
    fi
}

launch_stellaris() {
    show_info_message "Starting Stellaris" --timeout=0.5
    # Assuming the command to launch Stellaris is stored in a .desktop file
    stellaris_command=$(awk -F= '/^Exec/ {print $2; exit}' "${desktop_path}Stellaris.desktop")
    # Check if the command is retrieved successfully
    if [ -n "$stellaris_command" ]; then
        $stellaris_command
    else
        show_error_message "Failed to retrieve Stellaris command from .desktop file"
    fi
}

launch_hk() {
    show_info_message "Starting Hollow Knight" --timeout=0.5
    # Assuming the command to launch Hollow Knight is stored in a .desktop file
    hk_command=$(awk -F= '/^Exec/ {print $2; exit}' "${desktop_path}Hollow Knight.desktop")
    # Check if the command is retrieved successfully
    if [ -n "$hk_command" ]; then
        $hk_command
    else
        show_error_message "Failed to retrieve Hollow Knight command from .desktop file"
    fi
}

# Prompt user to select an option from a check list
system_options=$(zenity --height=720 --width=700\
  --list --title="Gaming Mode" --text="Created by Zaiquiri\n\nGaming Options:" --checklist \
    --column="Select" --column="Option" --column="Details" \
    TRUE "Shutdown unnecessary tasks" ""\
    TRUE "Update system" ""\
    TRUE "Activate TV output" ""\
    FALSE "Controller gaming mode" "Please only choose one controller mode"\
    FALSE "Controller mouse mode" "Controller mode"\
    FALSE "Launch Steam" "Please only choose one Steam option"\
    FALSE "Launch Steam: It Takes Two" "Steam option"\
    FALSE "Launch Steam: Ark" "Steam option"\
    FALSE "Launch Steam: Stellaris" "Steam option"\
    FALSE "Launch Steam: 7 Days to Die" "Steam option"\
    FALSE "Launch Steam: Hollow Knight" "Steam option"\
)

echo "here is the system_options: $system_options \n\n\n"
# Process system options
IFS='|' read -ra options_array <<< "$system_options"

# Variable to track if controller mode is selected
controller_selected=false
# Variable to track if Steam option is selected
steam_selected=false

for option in "${options_array[@]}"; do
    case $option in
        "Shutdown unnecessary tasks")
            shutdown_processes
            ;;
        "Update system")
            script_update
            ;;
        "Activate TV output")
            activate_tv
            ;;
        "Controller gaming mode")
            if $controller_selected; then
                show_error_message "Please select only one controller mode."
                exit 1
            fi
            controller_selected=true
            activate_controller_pc
            ;;
        "Controller mouse mode")
            if $controller_selected; then
                show_error_message "Please select only one controller mode."
                exit 1
            fi
            controller_selected=true
            activate_controller_console
            ;;
        "Launch Steam")
            if $steam_selected; then
                show_error_message "Please select only one Steam option."
                exit 1
            fi
            steam_selected=true
            launch_steam
            ;;
        "Launch Steam: Stellaris")
            if $steam_selected; then
                show_error_message "Please select only one Steam option."
                exit 1
            fi
            steam_selected=true
            launch_stellaris
            ;;
        "Launch Steam: 7 Days to Die")
            if $steam_selected; then
                show_error_message "Please select only one Steam option."
                exit 1
            fi
            steam_selected=true
            launch_7d2d
            ;;
        "Launch Steam: It Takes Two")
            if $steam_selected; then
                show_error_message "Please select only one Steam option."
                exit 1
            fi
            steam_selected=true
            launch_it2
            ;;
        "Launch Steam: Ark")
            if $steam_selected; then
                show_error_message "Please select only one Steam option."
                exit 1
            fi
            steam_selected=true
            launch_ark
            ;;
        "Launch Steam: Hollow Knight")
            if $steam_selected; then
                show_error_message "Please select only one Steam option."
                exit 1
            fi
            steam_selected=true
            launch_hk
            ;;
    esac
done
show_info_message "Happy Gaming!"
